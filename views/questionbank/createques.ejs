<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Create Question</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <link href="https://unpkg.com/boxicons@2.1.2/css/boxicons.min.css" rel="stylesheet"/>
  <link rel="stylesheet" href="/styles/sidebar3.css">
  <link rel="stylesheet" href="/styles/admin.css">
  <style>
    /* General body and layout */
body {
    font-family: 'Arial', sans-serif;
    background-color: #f4f7fc;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

/* Link Styling */
.create-chapter-link {
    font-size: 18px;
    color: #2c3e50;
    text-decoration: none;
    padding: 10px;
    border-radius: 5px;
    background-color: #f39c12;
    transition: background-color 0.3s ease;
    margin-bottom: 20px;
}

.create-chapter-link:hover {
    background-color: #e67e22;
}

/* Form container */
form {
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 600px;
}

/* Heading */
h2 {
    text-align: center;
    font-size: 24px;
    margin-bottom: 20px;
    color: #333;
}

/* Label styling */
label {
    display: block;
    margin-bottom: 8px;
    font-weight: 600;
    color: #333;
}

/* Select and Input Fields */
select, input[type="file"], input[type="number"] {
    width: 100%;
    padding: 12px;
    margin-bottom: 20px;
    border: 2px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
    color: #333;
}

select:focus, input[type="file"]:focus, input[type="number"]:focus {
    border-color: #3498db;
    outline: none;
}

input[type="file"] {
    padding: 10px;
}

/* Button Styling */
button.submit-btn {
    width: 100%;
    padding: 12px;
    background-color: #3498db;
    color: white;
    font-size: 16px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button.submit-btn:hover {
    background-color: #2980b9;
}

/* Flash Message Styles */
.flash-message {
    padding: 10px;
    margin: 10px 0;
    border-radius: 5px;
    position: fixed;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%); /* Center the message */
    display: none; /* Initially hidden */
    z-index: 9999; /* Ensure it's on top of other content */
    min-width: 300px;
    text-align: center;
}

.flash-message.success {
    background-color: #4caf50;
    color: white;
}

.flash-message.error {
    background-color: #f44336;
    color: white;
}

  </style>
</head>
<body>
   <div class="flash-message success" id="successMessage"></div>
   <div class="flash-message error" id="errorMessage"></div>
 
   <main>
    <div id="header-comp">
        <%- include('../components/admin-sidebar.ejs') %>
    </div>

    <div id="content-div">

      <a href="/create/information" class="create-chapter-link">Create Chapter</a>

<form action="/create-ques" method="POST" id="testForm" enctype="multipart/form-data">
  <div id="info">
      <h2>Create New Question</h2>

      <label for="subject">Subject:</label>
      <select id="subject" name="subject" onchange="fetchChapters()" required>
          <option value="">Select Subject</option>
          <!-- Subjects will be dynamically loaded -->
      </select>

      <label for="chapter">Chapter:</label>
      <select id="chapter" name="chapter" onchange="fetchTopics()" required>
          <option value="">Select Chapter</option>
          <!-- Chapters will be dynamically loaded -->
      </select>

      <label for="topic">Topic:</label>
      <select id="topic" name="topic" onchange="fetchQuestions()" required>
          <option value="">Select Topic</option>
          <!-- Topics will be dynamically loaded -->
      </select>

      <label for="file">Question Image:</label>
      <input type="file" name="file" required />

      <label for="correct">Right Option:</label>
      <input type="number" name="correct" required />

      <button type="submit" class="submit-btn">Create Test</button>
  </div>
</form>

</main>

    <script>
       async function fetchSubjects() {
          let response = await fetch('/api/subjects');
          let data = await response.json();
          const subject = document.getElementById("subject");
          subject.innerHTML = '<option value="">Select Subject</option>';
          for (let i = 0; i < data.length; i++) {
              const option = document.createElement('option');
              option.value = data[i].Name;
              option.textContent = data[i].Name;
              subject.appendChild(option);
          }
      }

      async function fetchChapters() {
          const subjectName = document.getElementById('subject').value;
          let response = await fetch(`/api/chapters/${subjectName}`);
          let data = await response.json();
          const chapter = document.getElementById("chapter");
          chapter.innerHTML = '<option value="">Select Chapter</option>';
          for (let i = 0; i < data.length; i++) {
              const option = document.createElement('option');
              option.value = data[i].ChapterName;
              option.textContent = data[i].ChapterName;
              chapter.appendChild(option);
          }
      }

      async function fetchTopics() {
          const chapterName = document.getElementById('chapter').value;
          let response = await fetch(`/api/topics/${chapterName}`);
          let data = await response.json();
          const topicDropdown = document.getElementById('topic');
          topicDropdown.innerHTML = '<option value="">Select Topic</option>';
          for (let i = 0; i < data.length; i++) {
              const option = document.createElement('option');
              option.value = data[i].TopicName;
              option.textContent = data[i].TopicName;
              topicDropdown.appendChild(option);
          }
      }
      fetchSubjects();

        // AJAX form submission
        document.getElementById("testForm").addEventListener("submit", async function (event) {
        event.preventDefault();  // Prevent the form from submitting normally

    const formData = new FormData(this);

    try {
        const response = await fetch('/create-ques', {
            method: 'POST',
            body: formData,
        });

        const result = await response.json();

        // Check if the response is successful or not
        if (response.ok) {
            document.getElementById("successMessage").innerText = result.message;
            document.getElementById("successMessage").style.display = "block";

            // Hide the success message after 2 seconds
            setTimeout(() => {
                document.getElementById("successMessage").style.display = "none";
            }, 2000);  // Hide after 2 seconds

        } else {
            document.getElementById("errorMessage").innerText = result.message;
            document.getElementById("errorMessage").style.display = "block";

            // Hide the error message after 2 seconds
            setTimeout(() => {
                document.getElementById("errorMessage").style.display = "none";
            }, 2000);  // Hide after 2 seconds
        }
    } catch (error) {
        console.error("Error submitting form:", error);
        document.getElementById("errorMessage").innerText = 'An error occurred. Please try again later.';
        document.getElementById("errorMessage").style.display = "block";

        // Hide the error message after 2 seconds
        setTimeout(() => {
            document.getElementById("errorMessage").style.display = "none";
        }, 2000);  // Hide after 2 seconds
    }
});

    </script>
</body>
</html>
