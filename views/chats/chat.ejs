<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat</title>
  <link rel="stylesheet" href="/styles/chat.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet"/>
</head>
<body>
  <div id="chat">
    <!-- Header Section -->
    <div class="header">
      <h6 id="recipientDisplay"></h6>
      <div class="dropdown">
        <button class="btn dropdown-toggle clear-chat-btn"  type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          i
        </button>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
          <a class="dropdown-item"><button style="all: unset;" onclick="clearChat()">Clear Chat</button></a>
        </div>
      </div>
    </div>

    <!-- Messages Section -->
    <div id="messages">
      <!-- Messages will be dynamically inserted here -->
    </div>

    <!-- Input Area -->
    <div class="input-area">
      <input type="text" id="messageInput" placeholder="Type a message..." />
      <button onclick="sendMessage()">&#8594;</button>
    </div>
  </div>

  <!-- Custom Modal for Confirmation -->
  <div id="confirmModal" class="modal">
    <div class="modal-content">
      <p>Are you sure you want to clear the chat history? This action cannot be undone.</p>
      <button onclick="confirmClearChat()">Yes, Clear</button>
      <button class="cancel" onclick="cancelClearChat()">Cancel</button>
    </div>
  </div>

  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.3/dist/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>  
<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    // Get current user email dynamically from the server (using template)
    const sender = "<%= currUser.email %>";
    // Get recipient from URL query parameter
    const urlParams = new URLSearchParams(window.location.search);
    const recipient = urlParams.get('recipient');
    // Display recipient's name in the chat header
      document.addEventListener('DOMContentLoaded', () => {
      document.getElementById('recipientDisplay').textContent = recipient;

      // Display the initial set of messages
      const messagesContainer = document.getElementById('messages');
      
      // Loop through the server-passed messages and display them
      const messages = <%- JSON.stringify(messages) %>;  // Inject the messages from the server
      messages.forEach(msg => {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message');
        messageElement.classList.add(msg.sender === sender ? 'sender' : 'recipient');
        messageElement.innerHTML = `${msg.content} <small>${msg.timestamp}</small>`;
        messagesContainer.appendChild(messageElement);
      });

      // Scroll to the bottom of the messages container
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    });

    // Join chat room for both sender and recipient
    socket.emit('join', sender);
    socket.emit('join', recipient);

    // Listen for incoming messages
    socket.on('receive_message', (data) => {
      const { sender: msgSender, content, timestamp } = data;
      const messageElement = document.createElement('div');
      messageElement.classList.add('message');
      messageElement.classList.add(msgSender === sender ? 'sender' : 'recipient');
      messageElement.innerHTML = `${content} <small>${timestamp}</small>`;
      document.getElementById('messages').appendChild(messageElement);

      // Scroll to the bottom of the messages container when a new message is added
      const messagesContainer = document.getElementById('messages');
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    });

    // Send message function
    function sendMessage() {
      const content = document.getElementById('messageInput').value;
      if (content.trim()) {
        const timestamp = new Date().toISOString();
        
        // Emit message to the server
        socket.emit('private_message', { sender, recipient, content, timestamp });

        // Clear input field after sending
        document.getElementById('messageInput').value = '';
      }
    }

    // Clear chat function with custom modal
    function clearChat() {
      // Show the confirmation modal
      const modal = document.getElementById('confirmModal');
      modal.style.display = "block";
    }

    // Confirm chat clear
    function confirmClearChat() {
      // Clear the messages from the DOM
      const messagesContainer = document.getElementById('messages');
      messagesContainer.innerHTML = ''; // Clears all messages

      // Optionally, clear the chat history in the database (send a request to the server)
      fetch(`/clear-chat?recipient=${recipient}&sender=${sender}`, {
        method: 'DELETE'
      }).then(response => {
        if (response.ok) {
          console.log('Chat history cleared');
        } else {
          console.error('Error clearing chat history');
        }
      });

      // Close the modal
      document.getElementById('confirmModal').style.display = "none";
    }

    // Cancel chat clear
    function cancelClearChat() {
      document.getElementById('confirmModal').style.display = "none";
    }
  </script>
</body>
</html>
